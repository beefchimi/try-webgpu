---
interface Props {
  width?: number;
  height?: number;
}

const {width = 512, height = 512} = Astro.props;
---

<canvas width={width} height={height}></canvas>

<script>
  // All code authored from:
  // https://codelabs.developers.google.com/your-first-webgpu-app
  const GRID_SIZE = 32;
  const GRID_CELLS = GRID_SIZE * GRID_SIZE;
  const UPDATE_INTERVAL = 200;

  ///
  /// Setup

  if (!navigator.gpu) throw new Error('WebGPU not supported on this browser.');

  const adapter = await navigator.gpu.requestAdapter();

  if (!adapter) throw new Error('No appropriate GPUAdapter found.');

  const canvas = document.querySelector('canvas');
  const context = canvas?.getContext('webgpu');

  if (!context) throw new Error('A canvas context could not be created.');

  const device = await adapter.requestDevice();
  const canvasFormat = navigator.gpu.getPreferredCanvasFormat();

  context.configure({
    device,
    format: canvasFormat,
  });

  ///
  /// Geometry

  // Create two triangles.
  // Co-ordinate pairs: odd = x / even = y
  const vertices = new Float32Array([
    // Triangle 1 (Blue)
    -0.8, -0.8, 0.8, -0.8, 0.8, 0.8,
    // Triangle 2 (Red)
    -0.8, -0.8, 0.8, 0.8, -0.8, 0.8,
  ]);

  const vertexBuffer = device.createBuffer({
    label: 'Cell vertices',
    // `size` is determined by multiplying the size of a 32-bit float (4 bytes)
    // by the number of floats in the vertices array (12). `TypedArrays` already
    // calculate their byteLength, so we can jsut use that.
    size: vertices.byteLength,
    // We want the buffer to be used for vertex data (GPUBufferUsage.VERTEX).
    // We also want to be able to copy data into it (GPUBufferUsage.COPY_DST).
    // Use of bitwise operator is intentional.
    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
  });

  // Copy vertex data into the buffer's memory.
  device.queue.writeBuffer(vertexBuffer, 0, vertices);

  ///
  /// Shaders

  const cellShaderModule = device.createShaderModule({
    label: 'Cell shader',
    code: `
      struct VertexInput {
        @location(0) pos: vec2f,
        @builtin(instance_index) instance: u32,
      };

      struct VertexOutput {
        @builtin(position) pos: vec4f,
        @location(0) cell: vec2f,
      };

      @group(0) @binding(0) var<uniform> grid: vec2f;
      @group(0) @binding(1) var<storage> cellState: array<u32>;

      @vertex
      fn vertexMain(input: VertexInput) -> VertexOutput  {
        let i = f32(input.instance);

        let cell = vec2f(i % grid.x, floor(i / grid.x));
        let state = f32(cellState[input.instance]);

        let cellOffset = cell / grid * 2;
        let gridPos = (input.pos * state + 1) / grid - 1 + cellOffset;

        // 4-dimensional vector (X, Y, Z, W)
        var output: VertexOutput;
        output.pos = vec4f(gridPos, 0, 1);
        output.cell = cell;

        return output;
      }

      @fragment
      fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {
        let redGreenChannels = input.cell / grid;
        // (Red, Green, Blue, Alpha)
        return vec4f(redGreenChannels, 1 - redGreenChannels.x, 1);
      }
    `,
  });

  ///
  /// Grid / Cells

  // Define the vertex data structure.
  const vertexBufferLayout: GPUVertexBufferLayout = {
    // The number of bytes the GPU needs to skip forward in the buffer when it's
    // looking for the next vertex. Each vertex of our square is made up of two
    // 32-bit floating point numbers. 2 floats (4 bytes) is 8 bytes.
    arrayStride: 8,
    attributes: [
      {
        // Our vertices have two 32-bit floats each, so we use the format `float32x2`.
        // If our vertex data is instead made up of four 16-bit unsigned integers each,
        // we would use `uint16x4` instead.
        format: 'float32x2',
        // Describes how many bytes into the vertex this particular attribute starts.
        // Only really relevant when your buffer has more than one attribute.
        offset: 0,
        // Links this attribute to a particular input in the vertex shader.
        // An arbitrary number between 0 and 15 and must be unique for each attribute.
        shaderLocation: 0,
      },
    ],
  };

  const cellPipeline = device.createRenderPipeline({
    label: 'Cell pipeline',
    layout: 'auto',
    vertex: {
      module: cellShaderModule,
      entryPoint: 'vertexMain',
      buffers: [vertexBufferLayout],
    },
    fragment: {
      module: cellShaderModule,
      entryPoint: 'fragmentMain',
      targets: [{format: canvasFormat}],
    },
  });

  // Create a uniform array + buffer that describes the grid.
  const uniformArray = new Float32Array([GRID_SIZE, GRID_SIZE]);
  const uniformBuffer = device.createBuffer({
    label: 'Grid Uniforms',
    size: uniformArray.byteLength,
    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
  });

  device.queue.writeBuffer(uniformBuffer, 0, uniformArray);

  // Create an array representing the active state of each cell.
  const cellStateArray = new Uint32Array(GRID_CELLS);

  // Create two storage buffers to hold the cell state.
  const cellStateStorage = [
    device.createBuffer({
      label: 'Cell State A',
      size: cellStateArray.byteLength,
      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
    }),
    device.createBuffer({
      label: 'Cell State B',
      size: cellStateArray.byteLength,
      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
    }),
  ];

  // Mark every third cell of the first grid as active.
  for (let i = 0; i < cellStateArray.length; i += 3) {
    cellStateArray[i] = 1;
  }

  device.queue.writeBuffer(cellStateStorage[0], 0, cellStateArray);

  // Mark every other cell of the second grid as active.
  for (let i = 0; i < cellStateArray.length; i++) {
    cellStateArray[i] = i % 2;
  }

  device.queue.writeBuffer(cellStateStorage[1], 0, cellStateArray);

  ///
  /// Bindings

  const bindGroups = [
    device.createBindGroup({
      label: 'Cell renderer bind group A',
      layout: cellPipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: {buffer: uniformBuffer},
        },
        {
          binding: 1,
          resource: {buffer: cellStateStorage[0]},
        },
      ],
    }),
    device.createBindGroup({
      label: 'Cell renderer bind group B',
      layout: cellPipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: {buffer: uniformBuffer},
        },
        {
          binding: 1,
          resource: {buffer: cellStateStorage[1]},
        },
      ],
    }),
  ];

  ///
  /// Draw and submit

  let step = 0;

  function updateGrid() {
    step++;

    // Start a render pass.
    const encoder = device.createCommandEncoder();
    const pass = encoder.beginRenderPass({
      colorAttachments: [
        {
          view: context!.getCurrentTexture().createView(),
          // Clear the texture when the render pass starts.
          loadOp: 'clear',
          // Set the texture color.
          clearValue: [0, 0, 0.4, 1],
          // Once the render pass is finished, save the results of any drawing
          // (done during the render pass) into the texture.
          storeOp: 'store',
        },
      ],
    });

    // Draw the grid.
    pass.setPipeline(cellPipeline);
    pass.setBindGroup(0, bindGroups[step % 2]);
    pass.setVertexBuffer(0, vertexBuffer);
    pass.draw(vertices.length / 2, GRID_CELLS);

    // End the render pass and submit the command buffer.
    pass.end();
    device.queue.submit([encoder.finish()]);
  }

  // Run only once
  // updateGrid();

  // Loop forever
  setInterval(updateGrid, UPDATE_INTERVAL);
</script>
